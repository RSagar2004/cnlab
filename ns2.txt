# Create a new simulator instance
set ns [new Simulator]
set p2 [new Agent/Ping]
$ns attach-agent $n1 $p2
# Open output files for trace and NAM visualization
set nf [open lab2.nam w]
$ns namtrace-all $nf
set tf [open lab2.tr w]
$ns trace-all $tf
# Create network nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]

set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
# Establish links between nodes
$ns duplex-link $n0 $n4 1005Mb 1ms DropTail
$ns duplex-link $n1 $n4 50Mb 1ms DropTail
$ns duplex-link $n2 $n4 2000Mb 1ms DropTail
$ns duplex-link $n3 $n4 200Mb 1ms DropTail
$ns duplex-link $n4 $n5 1Mb 1ms DropTail
# Create and attach Ping agents
set p1 [new Agent/Ping]
$ns attach-agent $n0 $p1
$p1 set packetSize_ 50000
$p1 set interval_ 0.0001
set p2 [new Agent/Ping]
$ns attach-agent $n1 $p2
set p3 [new Agent/Ping]
$ns attach-agent $n2 $p3
$p3 set packetSize_ 30000
$p3 set interval_ 0.00001
set p4 [new Agent/Ping]
$ns attach-agent $n3 $p4
set p5 [new Agent/Ping]
$ns attach-agent $n5 $p5
# Set queue limits on specific links
$ns queue-limit $n0 $n4 5
$ns queue-limit $n2 $n4 3

$ns queue-limit $n4 $n5 2
# Define the 'recv' method for the Ping agent
Agent/Ping instproc recv {from rtt} {
$self instvar node_
puts "node [$node_ id] received answer from $from with round trip time $rtt
msec"
}
# Connect the agents for communication
$ns connect $p1 $p5
$ns connect $p3 $p4
# Define a finish procedure to close trace files and launch NAM
proc finish { } {
global ns nf tf
$ns flush-trace
close $nf
close $tf
exec nam lab2.nam &
exit 0
}
# Schedule packet sending events
for {set i 1} {$i <= 10} {incr i} {
set time [expr $i * 0.1]
$ns at $time "$p1 send"
$ns at $time "$p3 send"
}
# Schedule the end of the simulation
$ns at 2.0 "finish"
# Run the simulation
$ns run


-----------AWK-------------

BEGIN{ c=0;}
{
if($1=="d")
{ c++;
}
}
END{ printf("The number of packets dropped is %d\n",c); }